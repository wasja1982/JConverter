package AtomM.GUI;

import AtomM.TConverter;
import java.text.DateFormat;
import java.util.Date;
import java.util.Vector;
import javax.swing.SwingUtilities;
import javax.swing.event.TableModelEvent;
import javax.swing.table.DefaultTableModel;

public class DLog extends javax.swing.JDialog {
    public DLog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        Thread t = new TConverter(this, (FConverter)getParent());
        t.start();
    }

    public void setProgress (Integer value, Integer max) {
        pbProgress.setMaximum(max);
        pbProgress.setValue(value);
    }

    public void setProgress (Integer value) {
        pbProgress.setValue(value);
    }

    public Integer getProgress () {
        return pbProgress.getValue();
    }

    public void println( String str ) {
        String date = DateFormat.getDateTimeInstance().format( new Date( System.currentTimeMillis() ) );
        System.out.println( "[" + date + "] " + str );
        DefaultTableModel newModel = (DefaultTableModel)taLog.getModel();
        Vector newRow = new Vector();
        if (str.startsWith("Stage ")) {
            str = "<html><font color='green'>" + str;
            date = "<html><font color='green'>" + date;
        } else if (str.startsWith("ERROR:")) {
            str = "<html><font color='red'>" + str;
            date = "<html><font color='red'>" + date;
        } else if (str.startsWith("WARNING:")) {
            str = "<html><font color='blue'>" + str;
            date = "<html><font color='blue'>" + date;
        }
        newRow.add( date );
        newRow.add( str );
        newModel.getDataVector().add( newRow );
        taLog.setModel( newModel );
        newModel.newRowsAdded( new TableModelEvent( newModel ) );
        taLog.getTableHeader().resizeAndRepaint();
        int lastRow = taLog.getRowCount() - 1;
        taLog.setRowSelectionInterval(lastRow, lastRow);
        Runnable scroll = new Runnable() {
            public void run() {
                taLog.scrollRectToVisible(taLog.getCellRect(taLog.getRowCount()-1, 0, true));
            }
        };
        SwingUtilities.invokeLater(scroll);
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scpLog = new javax.swing.JScrollPane();
        taLog = new javax.swing.JTable();
        buClose = new javax.swing.JButton();
        pbProgress = new javax.swing.JProgressBar();
        laProgress = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Конвертация...");
        setLocationByPlatform(true);

        taLog.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Время", "Сообщение"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        taLog.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        taLog.getTableHeader().setReorderingAllowed(false);
        taLog.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                taLogComponentResized(evt);
            }
        });
        scpLog.setViewportView(taLog);

        buClose.setText("Закрыть окно");
        buClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buCloseActionPerformed(evt);
            }
        });

        laProgress.setText("Выполнение конвертации:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(buClose, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(laProgress)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pbProgress, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(scpLog, javax.swing.GroupLayout.DEFAULT_SIZE, 585, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(scpLog, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(laProgress)
                    .addComponent(pbProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buClose)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buCloseActionPerformed
        this.dispose();
}//GEN-LAST:event_buCloseActionPerformed

    private void taLogComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_taLogComponentResized
        int w = taLog.getColumnModel().getTotalColumnWidth();
        taLog.getColumnModel().getColumn( 0 ).setPreferredWidth( (int)(0.2 * w) );
        taLog.getColumnModel().getColumn( 1 ).setPreferredWidth( (int)(0.75 * w) );
}//GEN-LAST:event_taLogComponentResized

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buClose;
    private javax.swing.JLabel laProgress;
    private javax.swing.JProgressBar pbProgress;
    private javax.swing.JScrollPane scpLog;
    private javax.swing.JTable taLog;
    // End of variables declaration//GEN-END:variables

}
